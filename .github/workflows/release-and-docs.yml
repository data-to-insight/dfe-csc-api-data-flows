name: Release build (EXE + dists) & MkDocs deploy

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  workflow_dispatch: {}

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # Release build (Windows) on tags
  release-build:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine pyinstaller
          pip install .

      - name: Clean previous build (PowerShell)
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue dist, build
          Get-ChildItem -Path . -Filter *.spec -File -Recurse -ErrorAction SilentlyContinue | Remove-Item -Force

      # Build Python dists first
      - name: Build sdist & wheel
        run: python -m build --sdist --wheel --outdir dist

      - name: Check metadata (twine)
        run: twine check dist\*.whl dist\*.tar.gz

      # Build the Windows EXE
      - name: Build EXE with PyInstaller
        run: pyinstaller api_pipeline\entry_point.py --onefile --name csc_api_pipeline --console

      - name: Smoke test EXE (--help)
        run: dist\csc_api_pipeline.exe --help

      - name: Generate SHA256 checksums
        shell: pwsh
        run: |
          Remove-Item -ErrorAction SilentlyContinue dist\SHA256SUMS.txt
          Get-ChildItem -Path dist -File | ForEach-Object {
            $h = Get-FileHash -Path $_.FullName -Algorithm SHA256
            '{0}  {1}' -f $h.Hash, $_.Name | Add-Content -Path dist\SHA256SUMS.txt -Encoding Ascii
          }
          Get-Content -Path dist\SHA256SUMS.txt

      - name: Assemble release bundle
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path release_bundle | Out-Null
          New-Item -ItemType Directory -Path release_bundle\notebooks | Out-Null
          Copy-Item dist\csc_api_pipeline.exe -Destination release_bundle\
          Copy-Item README.md -Destination release_bundle\
          Copy-Item api_pipeline\.env.example -Destination release_bundle\
          # PowerShell scripts, new path
          Copy-Item api_pipeline\pshell\phase_1_api_payload.ps1 -Destination release_bundle\
          Copy-Item api_pipeline\pshell\phase_1_api_credentials_smoke_test.ps1 -Destination release_bundle\
          # SQL files, new folder and filenames (legacy and current)
          Copy-Item sql_json_query\populate_ssd_api_data_staging_2012.sql -Destination release_bundle\
          Copy-Item sql_json_query\populate_ssd_api_data_staging_2016sp1.sql -Destination release_bundle\
          Copy-Item sql_json_query\ssd_csc_api_schema_checks.sql -Destination release_bundle\
          # Notebooks, whole folder under api_pipeline
          Copy-Item api_pipeline\notebooks\* -Destination release_bundle\notebooks\ -Recurse -Force
          Compress-Archive -Path release_bundle\* -DestinationPath release.zip -Force

      - name: Upload Release Artifacts to Git
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/csc_api_pipeline.exe
            release.zip
            dist/*.whl
            dist/*.tar.gz
            dist/SHA256SUMS.txt
            api_pipeline/pshell/phase_1_api_payload.ps1
            api_pipeline/pshell/phase_1_api_credentials_smoke_test.ps1
            sql_json_query/populate_ssd_api_data_staging_2012.sql
            sql_json_query/populate_ssd_api_data_staging_2016sp1.sql
            sql_json_query/ssd_csc_api_schema_checks.sql
            README.md
            api_pipeline/.env.example
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # MkDocs build (Linux) on main
  docs-build:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin mkdocs-with-pdf

      - name: Build site
        run: mkdocs build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

  # MkDocs deploy (Pages)
  pages-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docs-build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    concurrency:
      group: pages-${{ github.repository }}
      cancel-in-progress: true
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
