name: Release build (EXE + dists) & MkDocs deploy

on:
  push:
    branches: [main]           # docs deploys
    tags: ['v*.*.*']           # release builds
  workflow_dispatch: {}        # manual trigger

# Permissions needed across jobs
permissions:
  contents: write              # gh-release needs write
  pages: write                 # deploy-pages needs this
  id-token: write              # deploy-pages OIDC


jobs:
  # ===========================
  # 1) Release build (Windows)
  # ===========================
  release-build:
    if: startsWith(github.ref, 'refs/tags/v')  # only for version tags
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install .[build]        # uses your pyproject optional-deps: build
          pip install .               # local install so relative imports resolve

      - name: Clean previous build (CMD)
        shell: cmd
        run: |
          rmdir /s /q dist build || echo No previous build folders
          del /q /f *.spec || echo No .spec file

      # ---- Build Python dists first (so Twine never sees EXE) ----
      - name: Build sdist & wheel
        run: python -m build --sdist --wheel --outdir dist

      - name: Check metadata (twine)
        shell: pwsh
        run: |
          pip install twine
          twine check dist\*.whl dist\*.tar.gz

      # ---- Now build the EXE ----
      - name: Build EXE with PyInstaller
        run: pyinstaller api_pipeline\entry_point.py --onefile --name csc_api_pipeline --console

      - name: Smoke test EXE (--help)
        run: dist\csc_api_pipeline.exe --help

      - name: Generate SHA256 checksums
        shell: pwsh
        run: |
          Remove-Item -ErrorAction SilentlyContinue dist\SHA256SUMS.txt
          Get-ChildItem -Path dist -File | ForEach-Object {
            $h = Get-FileHash -Path $_.FullName -Algorithm SHA256
            '{0}  {1}' -f $h.Hash, $_.Name | Add-Content -Path dist\SHA256SUMS.txt -Encoding Ascii
          }
          Get-Content -Path dist\SHA256SUMS.txt

      - name: Zip release files
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path release_bundle | Out-Null
          Copy-Item dist\csc_api_pipeline.exe -Destination release_bundle\
          Copy-Item README.md -Destination release_bundle\
          Copy-Item api_pipeline\.env.example -Destination release_bundle\
          Copy-Item api_pipeline_pshell\phase_1_api_payload.ps1 -Destination release_bundle\
          Copy-Item api_sql_raw_json_query\populate_ssd_api_data_staging.sql -Destination release_bundle\
          if (Test-Path notebooks\dfe_csc_api_testing.ipynb) { Copy-Item notebooks\dfe_csc_api_testing.ipynb -Destination release_bundle\ }
          Compress-Archive -Path release_bundle\* -DestinationPath release.zip -Force

      - name: Upload Release Artifacts to Git
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/csc_api_pipeline.exe
            release.zip
            dist/*.whl
            dist/*.tar.gz
            dist/SHA256SUMS.txt
            api_pipeline_pshell/phase_1_api_payload.ps1
            api_sql_raw_json_query/populate_ssd_api_data_staging.sql
            README.md
            api_pipeline/.env.example
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===========================
  # 2) MkDocs build (Linux)
  # ===========================
  docs-build:
    if: github.ref == 'refs/heads/main'      # only for pushes to main
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false                  # avoid submodule noise

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin mkdocs-with-pdf

      - name: Build site
        run: mkdocs build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

  # ===========================
  # 3) MkDocs deploy (Pages)
  # ===========================
  pages-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docs-build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write

    # Concurrency only for deploy job (does NOT cancel whole workflow)
    concurrency:
      group: pages-${{ github.repository }}
      cancel-in-progress: true

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4